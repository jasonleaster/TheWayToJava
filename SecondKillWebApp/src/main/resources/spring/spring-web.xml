<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 引入属性文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" />

    <!-- 配置spring mvc -->
    <!--1.开启springMVC注解模式-->
    <!-- 简化配置
        (1)自动注册DefaultAnnotationHandlerMapping，AnnotationMethodHandlerAdapter
        (2)提供一系列：数据绑定、数字和日期的format @NumberFormat, @DataTimeFormat
            xml, json默认读写支持
    -->
    <mvc:annotation-driven />

    <!-- 自动扫描(自动注入) -->
    <context:component-scan base-package="org.jasonleaster" />

    <!-- Make this available across all of Spring MVC -->
    <!--<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager" />-->
    <!--Setup a handler for servering static content -->
    <mvc:resources mapping="/static/**"       location="/WEB-INF/static/"/>

    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="0"/>

        <property name="defaultViews">
            <list>
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" >
                    <property name="prettyPrint" value="true"/>
                </bean>
            </list>
        </property>

        <property name="contentNegotiationManager">
            <!-- Total customization - see below for explanation. -->
            <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
                <property name="favorPathExtension" value="false" />
                <property name="favorParameter" value="true" />
                <property name="parameterName" value="mediaType" />
                <property name="ignoreAcceptHeader" value="true"/>
                <property name="useJaf" value="false"/>
                <property name="defaultContentType" value="text/html" />

                <property name="mediaTypes">
                    <map>
                        <entry key="json" value="text/html;charset=UTF-8" />
                        <entry key="json" value="application/json;charset=UTF-8" />
                        <entry key="xml"  value="application/xml;charset=UTF-8" />
                    </map>
                </property>
            </bean>
        </property>
        <property name="viewResolvers">
            <list>
                <bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />

                <!-- If no extension matched, use JSP view -->
                <bean name="resolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="order" value="10"/>

                    <property name="prefix" value="/WEB-INF/views/jsp/"/>
                    <property name="suffix" value=".jsp"/>
                    <!--
                        Bydefaul the View object that InternalResourceViewResolver create is an
                        instance of InternalResourceView, which simply dispatches the request to
                        the JSP for rendering. But since demo.jsp use some JSTL tags, we may choose
                        to replace InternalResourceView with JstlView by setting the viewClass
                        property as follows
                     -->
                    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
                </bean>
            </list>

        </property>
    </bean>

</beans>